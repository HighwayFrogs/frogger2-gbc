;system equates

:p1      equ     $FF00           ;key port
:sb      equ     $FF01           ;serial data
:sc      equ     $FF02           ;serial control
:div     equ     $FF04           ;divider
:tima    equ     $FF05           ;timer register
:tma     equ     $FF06           ;modulo register
:tac     equ     $FF07           ;timer control
:.if     equ     $FF0F           ;interrupt request flag
:NR51	 equ	 $FF25
:ie      equ     $FFFF           ;interrupt acknowledge flag
lcdc     equ     $FF40           ;lcd control
:stat    equ     $FF41           ;lcdc status
:scy     equ     $FF42           ;scroll-x
:scx     equ     $FF43           ;scroll-y
:ly      equ     $FF44           ;lcdc-y position
:lyc     equ     $FF45           ;ly compare register
:dma     equ     $FF46           ;dma transfer
:bgp     equ     $FF47           ;bg palette
:obp0    equ     $FF48           ;obj palette-0
:obp1    equ     $FF49           ;obj palette-1
:wy      equ     $FF4A           ;window y-position
:wx      equ     $FF4B           ;window x-position
:vbk	equ	 $ff4f		 ;video bank select
bcps	equ	$ff68		;palette write address
bcpd	equ	$ff69		;palette data register
ocps	equ	$ff6a		;object palette wriute address
ocpd	equ	$ff6b		;object palette write data

;       dma

:dmasub  equ     $FF80           ;dma transfer subroutine
:objram  equ     $C000           ;oam buffer

dmasrc	equ	$ff51
dmadest	equ	$ff53

dmactrl	equ	$ff55

;Vectors and Nintendo registration data


	org     $00
	reti
;lable finder
	jp	eggs1
	jp	level

	org	$38
	reti

	org     $40		;Vertical Blanking interrupt
	jp      vblank

	org     $48		;LCDC status interrupt
	jp	myvec		;lcdcirq

	org     $50		;Timer interrupt
	reti

	org     $58		;SIO interrupt
	reti

	org     $60		;Key input interrupt
	reti

	org	$80
	reti			;keeps debugger from crashing?

	org     $100
	nop
	jp      g	


;Nintendo Character data
	db	$ce,$ed,$66,$66
	db	$cc,$0d,$00,$0b
	db	$03,$73,$00,$83
	db	$00,$0c,$00,$0d
	db	$00,$08,$11,$1f
	db	$88,$89,$00,$0e
	db	$dc,$cc,$6e,$e6
	db	$dd,$dd,$d9,$99
	db	$bb,$bb,$67,$63
	db	$6e,$0e,$ec,$cc
	db	$dd,$dc,$99,$9f
	db	$bb,$b9,$33,$3e
;Game Title
;$134-$13e
	db	"FROGGER2",0,0,0 ;title
;$13f-$142
	db	"BH2E"		;game code

;color flag $143

	if production
	db	$c0
	else
	db	$80
	endif

;maker code	$144-$145	NOTE -- must be ASCII encription of hex digit
	db	$35,$4b

;sgb function code	$146

	db	$00

;Cartridge Type	$147
	db	$1b		;MBC5
;ROM Size   $148
	db	$05		;0:256k, 1:512k, 2:1M, 3:2M, 4:4M, 5:8M
;RAM Size	$149
	db	$02		;0:None, 1:16k, 2:64k, 3:256k

;

;Destination Code   $14a
	db	1
;

; location $14b

	db	$33

;Version Number	$14c
	db	$01


;Complement Check  

	if production
	db	$11
	else
	db	$53		;Complement values of sum of data for 134H
	endif
;Check-Sum $14e-$14f, hi,lo
	db	$05,$1e		;Check-sum of program ROM (Check-sum should
				;be calculated with 00H for this data, and
				;it should be set here.)


